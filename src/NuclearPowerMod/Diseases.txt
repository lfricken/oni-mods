using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;
using Harmony;
using Klei.AI;
using Klei.AI.DiseaseGrowthRules;
using STRINGS;
using UnityEngine;
using System.ComponentModel;
using static Klei.AI.Disease;
using VoronoiTree;
using ProcGenGame;
using static ProcGenGame.TerrainCell;

namespace Database
{
	[HarmonyPatch(typeof(Database.Diseases))]
	[HarmonyPatch(new Type[] { })]
	static public class  Diseasesadd
	{
		/*
		new public Disease Dweebcephaly;

		new public Disease Lazibonitis;

		new public Disease FoodPoisoning;

		new public Disease PutridOdour;

		new public Disease Spores;

		new public Disease ColdBrain;

		new public Disease HeatRash;

		new public Disease SlimeLung;

        new public Disease Sunburn;
        */
		static public Disease Radioactive;


		private static void Postfix(Diseases __instance)
		{
			Debug.Log(" === MyDiseases.ctor === ");

			Radioactive = __instance.Add(new Radioactive());
			
		}
		/*
		new public static bool IsValidDiseaseID(string id)
		{
			Debug.Log(" === MyDiseases.IsValidDiseaseID === ");
			bool result = false;
			foreach (Disease resource in ((ExtendedDiseases)Db.Get().Diseases).resources)
			{
				if (resource.Id == id)
				{
					result = true;
				}
			}
			return result;
		}

		new public byte GetIndex(int hash)
		{
			Debug.Log(" === MyDiseases.( === ");
			var diseases = (ExtendedDiseases)Db.Get().Diseases;
			for (byte b = 0; b < diseases.Count; b = (byte)(b + 1))
			{
				Disease disease = ((ResourceSet<Disease>)diseases)[b];
				if (hash == disease.id.GetHashCode())
				{

					return b;
				}
			}
			return 255;
		}

		new public byte GetIndex(HashedString id)
		{
			return this.GetIndex(id.GetHashCode());
		}*/
	}
}